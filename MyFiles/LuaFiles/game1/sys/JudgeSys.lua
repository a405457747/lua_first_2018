---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by justi.
--- DateTime: 2024/6/17 6:48
---
local JudgeSys={}



local utilFunc =require("game1.utilFunc");

local function is_four(t)
    local pointArr=  js.map(t,function (item) return item.cPoint end);

   local count_hash = utilFunc.arrToHash(pointArr);

    local have_four=false;
    local awardPoint =0;--随便弄一个
    for i, v in pairs(count_hash) do
        if(v==4)then
            have_four=true;
            awardPoint=i;
            break;
        end
    end

    if(have_four==true)then
        return true,js.filter(t,function (item)return item.cPoint==awardPoint end);
    else
        return false,nil;
    end
end



local function copyData(t)
    local res ={};
    for i = 1, #t do
        res[i]=t[i];
    end
    return res;
end

--todo 这里判定有问题
local function is_flush(t)
    local firstFlower =t.cFlower;
    for i = 2, #t do
        if(t[i].cFlower~=firstFlower)then
            return false,nil;
        end
    end
    return (#t==5),copyData(t);
end

local function is_straight(t)

  local pointArr=  js.map(t,function (item) return item.cPoint end);
    table.sort(pointArr);

    for i = 1, #pointArr - 1 do
        if pointArr[i + 1] ~= pointArr[i] + 1 then
            return false,nil;
        end
    end

    return (#t==5),copyData(t);


end

local function is_straightFlush(t)
    local r1 =is_flush(t);
    local r2 =is_straight(t);

    return (r1 and r2),copyData(t);
end;

local function is_fullHouse(t)

    local pointArr=  js.map(t,function (item) return item.cPoint end);

    local count_hash = utilFunc.arrToHash(pointArr);

    local have_three=false;
    local have_double=false;

    for i, v in pairs(count_hash) do
        if(v==3)then
            have_three=true;
        end
        if(v==2)then
            have_double=true;
        end
    end

     return (have_three and have_double),copyData(t);

end

local function is_three(t)
    local pointArr=  js.map(t,function (item) return item.cPoint end);

    local count_hash = utilFunc.arrToHash(pointArr);

    local haveThree =false;
    local awardPoint =0;--随便弄一个
    for i, v in pairs(count_hash) do
        if(v==3)then
            haveThree =true;
            awardPoint=i;
            break;
        end
    end

    if(haveThree==true)then
        return true,js.filter(t,function (item)return item.cPoint==awardPoint end);
    else
        return false,nil;
    end
end

local function is_two_pair(t)
    local pointArr=  js.map(t,function (item) return item.cPoint end);
    local count_hash = utilFunc.arrToHash(pointArr);

    local pairCount =0;
    local awardPoints ={};
    for i, v in pairs(count_hash) do
        if(v==2)then
            pairCount=pairCount+1;
            table.insert(awardPoints,i);
        end
    end
    if(pairCount==2)then
        return true,js.filter(t,function (item) return (item.cPoint==awardPoints[1] or item.cPoint==awardPoints[2]) end);
    else
        return false,nil;
    end
end

local function is_one_pair(t)
    local pointArr=  js.map(t,function (item) return item.cPoint end);
    local count_hash = utilFunc.arrToHash(pointArr);

    local havePair =false;
    local awardPoint =0;
    for i, v in pairs(count_hash) do
        if(v==2)then
            havePair=true;
            awardPoint=i;
        end
    end

    if(havePair)then
        return true,js.filter(t,function (item)return item.cPoint==awardPoint end)
    else
        return false,nil;
    end
end

local function is_high(t)
    local pointArr=  js.map(t,function (item) return item.cPoint end);
    table.sort(pointArr);

    return (#t)~=0,js.filter(t,function (item) return item.cPoint==pointArr[#pointArr] end)
end


function JudgeSys.JudgeAward(selectPokerArr)
   --todo 能做哪些奖，根据等级挑选一个最大的。

    local match,result =is_straightFlush(selectPokerArr);
    if(match)then
        return CARD_Award.straightFlush,result;
    end

    local match,result =is_four(selectPokerArr);
    if(match)then
        return CARD_Award.four,result;
    end

    local match,result =is_fullHouse(selectPokerArr);
    if(match)then
        return CARD_Award.fullHouse,result;
    end

    local match,result =is_flush(selectPokerArr);
    if(match)then
        return CARD_Award.flush,result;
    end

    local match,result =is_straight(selectPokerArr);
    if(match)then
        return CARD_Award.straight,result;
    end

    local match,result =is_three(selectPokerArr);
    if(match)then
        return CARD_Award.three,result;
    end


    local match,result =is_two_pair(selectPokerArr);
    if(match)then
        return CARD_Award.two_pair,result;
    end

    local match,result =is_one_pair(selectPokerArr);
    if(match)then
        return CARD_Award.pair,result;
    end

    local match,result =is_high(selectPokerArr);
    if(match)then
        return CARD_Award.high,result;
    end

    return CARD_Award.null,{};
end

local function test()
    --print("judgeSys test",js.stringify(count));
end
test();
return JudgeSys;